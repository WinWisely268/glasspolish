AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  GPTriggersAPIName:
    Type: String
    Default: glasspolish-triggers
  GPUserPoolName:
    Type: String
    Default: gp0-pool
  GPUserPoolClientName:
    Type: String
    Default: react-dashboard
  GPImageAPIName:
    Type: String
    Default: gp-resize-api
  SSMParamRootPath:
    Type: String
    Default: /applications/GlassPolish

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    MemorySize: 256
    Runtime: go1.x
    Timeout: 10
    Tracing: Active

Resources:
  GPTriggersAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Ref GPTriggersAPIName
      StageName: prod
      Auth:
        ApiKeyRequired: true
      TracingEnabled: true
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: INFO
          MetricsEnabled: true
          ThrottlingRateLimit: 5
          ThrottlingBurstLimit: 10
      Cors:
        AllowOrigin: "'*'"
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key'"

  GPCognitoPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref GPUserPoolName
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true

  GPCognitoPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref GPCognitoPool
      ClientName: !Ref GPUserPoolClientName
      GenerateSecret: false
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      CallbackURLs:
        - http://localhost:3000/
        - https://dev.glasspolish.store/
      LogoutURLs:
        - http://localhost:3000/
        - https://dev.glasspolish.store/

  GPDeleteAccountFunction:
    Type: 'AWS::Serverless::Function' # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./bin/delete-acc/
      Handler: delete-acc
      Policies:
        - AmazonCognitoPowerUser
        - SSMParameterReadPolicy:
            ParameterName: 'applications/GlassPolish/*'
      Events:
        DeleteAccountAPI:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref GPTriggersAPI
            Path: /delete
            Method: POST

  GPUpdateAccountRoleFunction:
    Type: 'AWS::Serverless::Function' # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./bin/update-acc/
      Handler: update-acc
      Policies:
        - AmazonCognitoPowerUser
        - SSMParameterReadPolicy:
            ParameterName: 'applications/GlassPolish/*'
      Events:
        UpdateAccountRoleAPI:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref GPTriggersAPI
            Path: /update
            Method: POST

  GPDisableAccountFunction:
    Type: 'AWS::Serverless::Function' # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./bin/disable-acc/
      Handler: disable-acc
      Policies:
        - AmazonCognitoPowerUser
        - SSMParameterReadPolicy:
            ParameterName: 'applications/GlassPolish/*'
      Events:
        DisableAccountAPI:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref GPTriggersAPI
            Path: /disable
            Method: POST

  GPPretokenAuth:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ./bin/pretoken/
      Handler: pretoken
      Policies:
        - AmazonCognitoPowerUser
        - SSMParameterReadPolicy:
            ParameterName: 'applications/GlassPolish/*'
      Events:
        CognitoUserPoolPreToken:
          Type: Cognito
          Properties:
            UserPool: !Ref GPCognitoPool
            Trigger: PreTokenGeneration

  GPPostAuth:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ./bin/postauth/
      Handler: postauth
      Policies:
        - AmazonCognitoPowerUser
        - SSMParameterReadPolicy:
            ParameterName: 'applications/GlassPolish/*'
      Events:
        CognitoUserPoolPostAuth:
          Type: Cognito
          Properties:
            UserPool: !Ref GPCognitoPool
            Trigger: PostAuthentication

  GPTriggersAPIKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Description: !Sub ${AWS::StackName}-api-key
      Enabled: true
      StageKeys:
        - RestApiId: !Ref GPTriggersAPI
          StageName: prod

  GPTriggersUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref GPTriggersAPI
          Stage: prod
      Description: Usage Plan for GPTriggersAPI
      Quota:
        Limit: 5000
        Period: MONTH
      Throttle:
        BurstLimit: 200
        RateLimit: 100
      UsagePlanName: !Sub ${AWS::StackName}-usageplan

  GPTriggersUsagePlanKey:
    Type: 'AWS::ApiGateway::UsagePlanKey'
    Properties:
      KeyId: !Ref GPTriggersAPIKey
      KeyType: API_KEY
      UsagePlanId: !Ref GPTriggersUsagePlan

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchRole.Arn

  ApiGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - apigateway.amazonaws.com
  GPImageAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Ref GPImageAPIName
      StageName: prod
      TracingEnabled: true
      Auth:
        DefaultAuthorizer: SFUserPoolAuth
        Authorizers:
          SFUserPoolAuth:
            UserPoolArn:
              Fn::Join:
                - ''
                - - !Sub ''
                  - !GetAtt GPCognitoPool.Arn
        AddDefaultAuthorizerToCorsPreflight: false
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: INFO
          MetricsEnabled: true
          ThrottlingRateLimit: 5
          ThrottlingBurstLimit: 10
      Cors:
        AllowOrigin: "'*'"
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key'"
      GatewayResponses:
        DEFAULT_4xx:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key'"
        DEFAULT_5xx:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key'"

  UploadUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: bin/upload-url/
      Handler: upload-url
      Policies:
        - S3WritePolicy:
            BucketName: !Ref ImageBucket
        - SSMParameterReadPolicy:
            ParameterName: 'applications/GlassPolish/*'
      Environment:
        Variables:
          AWS_S3_BUCKET: !Ref ImageBucket
      Events:
        UploadUrl:
          Type: Api
          Properties:
            RestApiId: !Ref GPImageAPI
            Path: /upload-url
            Method: POST

  DownloadUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: bin/download-url/
      Handler: download-url
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: 'applications/GlassPolish/*'
      Environment:
        Variables:
          CF_DOMAIN_NAME: !GetAtt CloudfrontDistribution.DomainName
      Events:
        DownloadUrl:
          Type: Api
          Properties:
            RestApiId: !Ref GPImageAPI
            Path: /download-url
            Method: POST

  ResizeImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: bin/resize-img/
      Handler: resize-img
      # cannot specify ImageBucket because of circular dependency
      Policies:
        - AmazonS3FullAccess
        - SSMParameterReadPolicy:
            ParameterName: 'applications/GlassPolish/*'
      Events:
        OnObjectCreated:
          Type: S3
          Properties:
            Bucket: !Ref ImageBucket
            Events:
              - s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: 'raw-images'

  # To display S3 trigger on Lambda console only
  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt ResizeImageFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 's3.amazonaws.com'
      SourceAccount: !Sub ${AWS::AccountId}
      SourceArn: !GetAtt ImageBucket.Arn

  ImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - '*'
            AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            MaxAge: 3000

  ImageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ImageBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: s3:GetObject
            Resource:
              - !Sub 'arn:aws:s3:::${ImageBucket}/*'
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "Serverless image download"

  CloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: "Cloudfront distribution for image download"
        Enabled: true
        HttpVersion: http2
        Origins:
          - Id: imageBucketOrigin
            DomainName: !GetAtt ImageBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          ForwardedValues:
            QueryString: true
          TargetOriginId: imageBucketOrigin
#          TrustedKeyGroups:
#            - glasspolish-keygroup
          ViewerProtocolPolicy: redirect-to-https
          TrustedSigners:
            - self


Outputs:
  GPTriggersAPI:
    Description: "API Gateway endpoint URL for Hasura Account Event Triggers"
    Value: !Sub "https://${GPTriggersAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/"
  GPDeleteAccountFunction:
    Description: "Delete Account event trigger"
    Value: !GetAtt GPDeleteAccountFunction.Arn
  GPDeleteAccountFunctionIamRole:
    Description: "Implicit IAM Role created for DeleteAccount function"
    Value: !GetAtt GPDeleteAccountFunctionRole.Arn
  GPUpdateAccountRoleFunction:
    Description: "Update Account Role event trigger"
    Value: !GetAtt GPUpdateAccountRoleFunction.Arn
  GPUpdateAccountRoleFunctionIamRole:
    Description: "Implicit IAM Role created for UpdateAccountRole function"
    Value: !GetAtt GPUpdateAccountRoleFunctionRole.Arn
  GPDisableAccountFunction:
    Description: "Disable Account event trigger"
    Value: !GetAtt GPDisableAccountFunction.Arn
  GPDisableAccountFunctionIamRole:
    Description: "Implicit IAM Role created for DisableAccount function"
    Value: !GetAtt GPDisableAccountFunctionRole.Arn
